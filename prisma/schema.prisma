// schema.prisma - Base de Datos LearnLingo
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USUARIOS
model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  name               String
  preferredLanguage  String    @default("es")
  
  // Gamificaci√≥n
  level              Int       @default(1)
  xp                 Int       @default(0)
  lives              Int       @default(5)
  streak             Int       @default(0)
  gems               Int       @default(100)
  totalLessons       Int       @default(0)
  
  // Timestamps
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastLoginAt        DateTime?
  
  // Relaciones
  profile            UserProfile?
  subscription       Subscription?
  progress           LessonProgress[]
  
  @@map("users")
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  avatar      String?
  bio         String?
  studyGoal   Int      @default(5)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

// SUSCRIPCIONES
model Subscription {
  id                String            @id @default(cuid())
  userId            String            @unique
  planType          SubscriptionPlan  @default(FREE)
  isActive          Boolean           @default(false)
  
  // Stripe
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  
  // Fechas
  startDate         DateTime?
  endDate           DateTime?
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

enum SubscriptionPlan {
  FREE
  PREMIUM_MONTHLY
  PREMIUM_YEARLY
  FAMILY
}

// CURSOS Y LECCIONES
model Course {
  id           String   @id @default(cuid())
  name         String
  description  String
  language     String
  flag         String
  difficulty   Difficulty @default(BEGINNER)
  isActive     Boolean  @default(true)
  order        Int
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  lessons      Lesson[]
  
  @@map("courses")
}

model Lesson {
  id           String     @id @default(cuid())
  courseId     String
  title        String
  description  String
  difficulty   Difficulty @default(BEGINNER)
  xpReward     Int        @default(20)
  isPremium    Boolean    @default(false)
  estimatedTime Int       @default(15)
  order        Int
  isActive     Boolean    @default(true)
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  course       Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions    Question[]
  progress     LessonProgress[]
  
  @@map("lessons")
}

model Question {
  id            String       @id @default(cuid())
  lessonId      String
  type          QuestionType
  question      String
  options       String[]     @default([])
  correctAnswer Int
  explanation   String?
  points        Int          @default(10)
  order         Int
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  lesson        Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@map("questions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_BLANK
  LISTENING
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

// PROGRESO
model LessonProgress {
  id           String    @id @default(cuid())
  userId       String
  lessonId     String
  completed    Boolean   @default(false)
  score        Int       @default(0)
  accuracy     Float     @default(0)
  timeSpent    Int       @default(0)
  attempts     Int       @default(0)
  
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson       Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("lesson_progress")
}